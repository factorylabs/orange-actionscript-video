package com.factorylabs.orange.video{	import com.factorylabs.orange.core.IDisposable;	import org.openvideoplayer.events.OvpEvent;	import org.openvideoplayer.net.OvpConnection;	import org.openvideoplayer.net.OvpNetStream;	import org.osflash.signals.Signal;	import flash.display.DisplayObjectContainer;	import flash.events.AsyncErrorEvent;	import flash.events.IOErrorEvent;	import flash.events.NetStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.media.Video;	/**	 * Summary. 	 *  	 * <p>Description.</p> 	 * 	 * <hr />	 * <p><a target="_top" href="http://github.com/factorylabs/orange-actionscript/MIT-LICENSE.txt">MIT LICENSE</a></p>	 * <p>Copyright (c) 2004-2010 <a target="_top" href="http://www.factorylabs.com/">Factory Design Labs</a></p>	 * 	 * <p>Permission is hereby granted to use, modify, and distribute this file 	 * in accordance with the terms of the license agreement accompanying it.</p> 	 *	 * @author		Grant Davis	 * @version		1.0.0 :: Mar 1, 2010	 */	public class FVideo 		extends Video			implements IDisposable	{		//-----------------------------------------------------------------		// Variables		//-----------------------------------------------------------------				protected var _holder			:DisplayObjectContainer;		protected var _connection		:OvpConnection;		protected var _stream			:OvpNetStream;		protected var _host				:String;		protected var _url				:String;				protected var _state			:String;				// event signals		protected var _stateSignal		:Signal;					//-----------------------------------------------------------------		// Getters/Setters		//-----------------------------------------------------------------			public function get connection() :OvpConnection { return _connection; }			//-----------------------------------------------------------------		// Constructor		//-----------------------------------------------------------------			public function FVideo( $holder :DisplayObjectContainer=null, $initObj :Object=null )		{			super();			_holder = $holder;			if( _holder != null ) _holder.addChild( this );			if( $initObj != null ) setProperties( $initObj );			initialize();			buildConnection();		}						//-----------------------------------------------------------------		// API		//-----------------------------------------------------------------				public function toString() :String 		{			return 'com.factorylabs.orange.video.FVideo';		}				/**		 * RTMP. Connects to a FMS server.		 */		public function connect( $host :String ) :void		{					}				/**		 * Progressive. Load but don't play.		 */		public function load( url :String ) :void		{					}				public function play( url :String=null ) :void		{					}				public function dispose() :void		{						}				//-----------------------------------------------------------------		// Startup		//-----------------------------------------------------------------				protected function initialize() :void		{					}				//-----------------------------------------------------------------		// Connection sequence		//-----------------------------------------------------------------				/**		 * Builds the instance of the OvpConnection object.		 * 		 * Override this method to 		 */		protected function buildConnection() :void		{			_connection = new OvpConnection();			_connection.addEventListener( AsyncErrorEvent.ASYNC_ERROR, handleAsyncError );			_connection.addEventListener( IOErrorEvent.IO_ERROR, handleIOError );			_connection.addEventListener( OvpEvent.BANDWIDTH, handleBandwidth );			_connection.addEventListener( OvpEvent.ERROR, handleError );			_connection.addEventListener( OvpEvent.STREAM_LENGTH, handleStreamLength );			_connection.addEventListener( NetStatusEvent.NET_STATUS, handleConnectionNetStatus );			_connection.addEventListener( SecurityErrorEvent.SECURITY_ERROR, handleSecurityError );		}				private function handleStreamLength( $e :OvpEvent ) :void		{						}				private function handleConnectionNetStatus( $e :NetStatusEvent ) :void		{					}				private function handleSecurityError( $e :SecurityErrorEvent ) :void		{					}				private function handleIOError( $e :IOErrorEvent ) :void		{					}				private function handleError( $e :OvpEvent ) :void		{					}				private function handleBandwidth( $e :OvpEvent ) :void		{					}				private function handleAsyncError( $e :AsyncErrorEvent ) :void		{						}				protected function handleConnect() :void		{			buildNetStream();		}				protected function buildNetStream() :void		{			_stream = new OvpNetStream( _connection );		}				//-----------------------------------------------------------------		// Helper methods		//-----------------------------------------------------------------		private final function setState( $state :String ) :void		{			if( $state != _state )			{				_state = $state;				_stateSignal.dispatch( _state );			}		}		private final function setProperties( $obj : Object ) :void		{			for( var prop : String in $obj )			{				if( this.hasOwnProperty( prop )) this[ prop ] = $obj[ prop ];				else				{					throw new Error( "The property " + prop + " was not found on " + this.toString());				}			}		}	}}